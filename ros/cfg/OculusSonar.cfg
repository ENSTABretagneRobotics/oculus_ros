#!/usr/bin/env python
PACKAGE = "oculus_sonar"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# const values are taken from oculus_SDK Oculus.h

# Frequency of the ping (1.2Mhz or 2.1Mz)
frequency_mode = gen.enum([
    gen.const("FrequencyLow",  int_t, 1, "Low frequency (1.2MHz, wide aperture)."),
    gen.const("FrequencyHigh", int_t, 2, "High frequency (2.1Mhz, narrow aperture).")],
    "Sonar beam frequency mode.")
gen.add("frequency_mode", int_t, 0, "Sonar beam frequency mode.",
        default=1, min=1, max=2, edit_method=frequency_mode)

# Number of pings per second
ping_rate = gen.enum([
    gen.const("PingRateNormal",  int_t, 0, "10Hz max ping rate."),
    gen.const("PingRateHigh",    int_t, 1, "15Hz max ping rate."),
    gen.const("PingRateHighest", int_t, 2, "40Hz max ping rate."),
    gen.const("PingRateLow",     int_t, 3, "5Hz max ping rate."),
    gen.const("PingRateLowest",  int_t, 4, "2Hz max ping rate."),
    gen.const("NoPing",  int_t, 5, "Standby mode (no ping fire).")],
    "Frequency of ping fires.")
gen.add("ping_rate", int_t, 0, "Frequency of ping fires.",
        default=0, min=0, max=5, edit_method=ping_rate)

# Hint on available network speed (investigate ?)
gen.add("network_speed", int_t, 0, "Hint on network available speed ?.", 
        default=255, min=0, max=255)

# Hardware gain on received ping
gen.add("gamma_correction", int_t, 0, "Gamma correction",
        default=127, min=0, max=255)

# non-configurable
# # the next 3 parameters are used to fill the OculusFireMessage.flags parameter
# # For now only compatible with SimplePingResult
# range_type = gen.enum([gen.const("Percents", int_t, 0, "Interpret range in percents."),
#                        gen.const("Meters",   int_t, 1, "Interpret range in meters")],
#                        "Range unit type.");
# gen.add("range_type", int_t, 0, "Range unit type.",
#         default=1, min =0, max=1, edit_method=range_type)

data_depth = gen.enum([gen.const("8bits",  int_t, 0, "Ping data encoded on 8bits."),
                       gen.const("16bits", int_t, 1, "Ping data encoded on 16bits.")],
                       "Ping data encoding bit count.");
gen.add("data_depth", int_t, 0, "Encoding of ping data.",
        default=0, min =0, max=1, edit_method=data_depth)

gen.add("send_gain", bool_t, 0, "Whatever that is...",  default=False)

gen.add("hf_range", double_t, 0, "Sonar range (in meters)",
        default=3.0, min=0.3, max=10.0)

# # range
# hfRangeGroup = gen.add_group("HF_Range", type="hide")
# hfRangeGroup.add("hf_range", double_t, 0, "Sonar range (in meters)",
#                  default=2.0, min=0.3, max=10.0)

# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
# 
# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
# 
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "oculus_sonar", "OculusSonar"))


